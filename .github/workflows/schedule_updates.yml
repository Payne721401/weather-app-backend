name: Scheduled Weather Data Updates

on:
  # 允許手動從 GitHub Actions 頁面觸發此工作流程，方便測試
  workflow_dispatch:

  schedule:
    # 使用 CRON 語法定義排程
    # 註解：CRON 時間為 UTC，比台灣時間慢 8 小時
    
    # 每 10 分鐘執行一次 (用於 radar, current_weather)
    - cron: '*/10 * * * *'
    
    # 每小時的第 20 分鐘執行一次 (用於 uv, air_quality)
    - cron: '0 * * * *'
    
    # 每 3 小時執行一次 (用於 3-hour)
    - cron: '0 */3 * * *'
    
    # 每天 UTC 時間 06:00 和 18:00 執行一次 (用於 weekly)
    - cron: '0 6,18 * * *'
    
    # 每天 UTC 時間 16:00 (台灣時間午夜 00:00) 執行一次 (用於 sunrise_sunset)
    - cron: '0 16 * * *'

jobs:
  run-tasks:
    # 在最新的 Ubuntu 虛擬環境中執行
    runs-on: ubuntu-latest
    
    steps:
      # 步驟 1: 從您的儲存庫下載程式碼到虛擬環境
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟 2: 設定您指定的 Python 版本
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # 您可以根據需求更改此版本

      # 步驟 3: 安裝專案所需的 Python 套件
      - name: Install dependencies
        run: pip install -r requirements.txt

      # 步驟 4: 將 GCP 服務帳號金鑰從 Secret 還原成檔案 (安全作法)
      - name: Decode GCP Service Account Key
        run: |
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}" | base64 --decode > "${{ runner.temp }}/gcp-key.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/gcp-key.json" >> $GITHUB_ENV

      # 步驟 5: 根據排程時間執行對應的 Python 腳本任務
      - name: Run Scheduled Tasks
        # 將所有 GitHub Secrets 設為環境變數，讓 Python 腳本可以讀取
        env:
          CWA_API_KEY: ${{ secrets.CWA_API_KEY }}
          NCDR_API_KEY: ${{ secrets.NCDR_API_KEY }}
          MONEV_API_KEY: ${{ secrets.MONEV_API_KEY }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # 每 10 分鐘執行的任務
          if [[ "${{ github.event.schedule }}" == "*/10 * * * *" ]]; then
            echo "Running 10-minute tasks..."
            python functions/main.py update_current_weather
            python functions/main.py update_radar
          fi
          
          # 每小時執行的任務
          if [[ "${{ github.event.schedule }}" == "0 * * * *" ]]; then
            echo "Running hourly tasks..."
            python functions/main.py update_uv_index
            python functions/main.py update_air_quality
          fi

          # 每 3 小時執行的任務
          if [[ "${{ github.event.schedule }}" == "0 */3 * * *" ]]; then
            echo "Running 3-hourly tasks..."
            python functions/main.py update_three_hour_forecast
          fi

          # 每日兩次的任務 (6:00, 18:00 UTC)
          if [[ "${{ github.event.schedule }}" == "0 6,18 * * *" ]]; then
            echo "Running twice-daily tasks..."
            python functions/main.py update_weekly_forecast
          fi

          # 每日執行的任務
          if [[ "${{ github.event.schedule }}" == "0 16 * * *" ]]; then
            echo "Running daily tasks..."
            python functions/main.py update_sunrise_sunset
          fi

          # 如果是手動觸發，則執行所有任務以供測試
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger: Running all tasks for testing..."
            python functions/main.py update_current_weather
            python functions/main.py update_radar
            python functions/main.py update_three_hour_forecast
            python functions/main.py update_weekly_forecast
            python functions/main.py update_uv_index
            python functions/main.py update_air_quality
            python functions/main.py update_sunrise_sunset
          fi
