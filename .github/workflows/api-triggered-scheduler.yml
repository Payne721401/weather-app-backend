name: Unified Smart Scheduler

on:
  repository_dispatch:
    types: [run-weather-tasks]
  
  workflow_dispatch:
    inputs:
      task:
        description: 'Manually run a single task (e.g., update_radar)'
        required: false

jobs:
  run-tasks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
          gcp-sa-key: ${{ secrets.GCP_SA_KEY_BASE64 }}
          cwa-api-key: ${{ secrets.CWA_API_KEY }}
          ncdr-api-key: ${{ secrets.NCDR_API_KEY }}
          monev-api-key: ${{ secrets.MONEV_API_KEY }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          telegram-bot-token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram-chat-id: ${{ secrets.TELEGRAM_CHAT_ID }}
          r2-bucket-name: ${{ vars.R2_BUCKET_NAME }}
          r2-endpoint-url: ${{ vars.R2_ENDPOINT_URL }}

      - name: Smart Task Execution
        id: smart_tasks
        run: |
          # --- 處理手動或 API 觸發的單一任務 ---
          TASK_TO_RUN="${{ github.event.client_payload.task || inputs.task }}"
          if [[ -n "$TASK_TO_RUN" ]]; then
            echo "🎯 Executing single task from external trigger: $TASK_TO_RUN"
            python functions/main.py "$TASK_TO_RUN"
            exit 0
          fi

          # --- 處理由 App Script 觸發的智能調度 ---
          echo "🤖 Running in scheduled mode..."
          # 使用 TZ='Asia/Taipei' 來獲取台灣時間 (UTC+8)
          hour=$(TZ='Asia/Taipei' date +%H)
          minute=$(TZ='Asia/Taipei' date +%M)
          echo "Current Taiwan Time (UTC+8): $hour:$minute"

          tasks_to_run=()

          # 判斷式 1: 每10分鐘 (因為 App Script 每10分鐘觸發一次，所以這個永遠執行)
          tasks_to_run+=("update_radar")

          # 判斷式 2: 每小時 (在整點後 5-14 分鐘之間觸發時執行)
          if (( minute >= 5 && minute < 15 )); then
            tasks_to_run+=("update_air_quality")
            tasks_to_run+=("update_uv_index")
            tasks_to_run+=("update_current_weather")
          fi

          # 判斷式 3: 每3小時 (0,3,6...點後的 5-14 分鐘之間觸發)
          if (( hour % 3 == 0 && minute >= 5 && minute < 15 )); then
            tasks_to_run+=("update_three_hour_forecast")
          fi

          # 判斷式 4: 每天兩次 (台灣時間 06:05 和 18:05 觸發)
          if (( (hour == 6 || hour == 18) && minute >= 5 && minute < 15 )); then
            tasks_to_run+=("update_weekly_forecast")
          fi

          # 判斷式 5: 每天一次 (台灣時間 00:05 觸發)
          if (( hour == 0 && minute >= 5 && minute < 15 )); then
            tasks_to_run+=("update_sunrise_sunset")
          fi
          
          # 判斷式 6: 颱風預報，每天兩次 (台灣時間 02:40 和 14:40 觸發)
          if (( (hour == 2 || hour == 14) && minute >= 40 && minute < 50 )); then
            tasks_to_run+=("update_typhoon_forecast")
          fi

          # --- 平行執行所有被觸發的任務 ---
          # 使用 sort -u 來移除重複的任務
          unique_tasks=($(echo "${tasks_to_run[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

          if [ ${#unique_tasks[@]} -eq 0 ]; then
            echo "✅ No tasks to run at this time."
            exit 0
          fi

          echo "🚀 Starting parallel execution for: ${unique_tasks[*]}"
          for task in "${unique_tasks[@]}"; do
            echo "  -> Launching $task in background..."
            python functions/main.py "$task" &
          done

          # 等待所有背景任務完成
          wait
          echo "✅ All tasks finished."